// Generated by CoffeeScript 1.6.3
(function() {
  var _ref, _ref1, _ref2, _ref3, _ref4, _ref5,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.Todo = (function(_super) {
    __extends(Todo, _super);

    function Todo() {
      this.isCompleted = __bind(this.isCompleted, this);
      this.archive = __bind(this.archive, this);
      this.toggle = __bind(this.toggle, this);
      this.initialize = __bind(this.initialize, this);
      _ref = Todo.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Todo.prototype.urlRoot = '/todos';

    Todo.prototype.sync = BackboneHTTP.sync(Todo);

    Todo.prototype.defaults = {
      title: '',
      completed: false,
      completedDate: 0,
      created: 0,
      archived: false
    };

    Todo.prototype.initialize = function() {
      if (this.isNew()) {
        return this.set('created', Date.now());
      }
    };

    Todo.prototype.toggle = function() {
      this.set('completed', !this.isCompleted());
      if (this.isCompleted()) {
        this.set('completedDate', Date.now());
      }
      return this;
    };

    Todo.prototype.archive = function() {
      this.set('archived', true);
      return this;
    };

    Todo.prototype.isCompleted = function() {
      return this.get('completed');
    };

    return Todo;

  })(Backbone.Model);

  window.TodoList = (function(_super) {
    __extends(TodoList, _super);

    function TodoList() {
      this.getActive = __bind(this.getActive, this);
      this.getCompleted = __bind(this.getCompleted, this);
      _ref1 = TodoList.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    TodoList.prototype.model = Todo;

    TodoList.prototype.sync = BackboneHTTP.sync(TodoList);

    TodoList.prototype.getCompleted = function() {
      return this.filter(this._isCompleted);
    };

    TodoList.prototype.getActive = function() {
      return this.reject(this._isCompleted);
    };

    TodoList.prototype.comparator = function(todo) {
      return todo.get("created");
    };

    TodoList.prototype._isCompleted = function(todo) {
      return todo.isCompleted();
    };

    return TodoList;

  })(Backbone.Collection);

  window.ItemView = (function(_super) {
    __extends(ItemView, _super);

    function ItemView() {
      this.toggle = __bind(this.toggle, this);
      _ref2 = ItemView.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    ItemView.prototype.tagName = "li";

    ItemView.prototype.template = "#template-todoItemView";

    ItemView.prototype.ui = {
      edit: ".edit"
    };

    ItemView.prototype.events = {
      "click .destroy": "destroy",
      "dblclick label": "onEditClick",
      "keypress .edit": "onEditKeypress",
      "blur .edit": "onEditBlur",
      "click .toggle": "toggle"
    };

    ItemView.prototype.initialize = function() {
      return this.listenTo(this.model, "change", this.render);
    };

    ItemView.prototype.onRender = function() {
      this.$el.removeClass("active completed");
      if (this.model.get("completed")) {
        return this.$el.addClass("completed");
      } else {
        return this.$el.addClass("active");
      }
    };

    ItemView.prototype.destroy = function() {
      var _this = this;
      return this.model.archive().save({}, {
        success: function() {
          app.collections.tds.remove(_this.model);
          return console.log('todo archived');
        },
        error: function(model, xhr, options) {
          return console.log('archive error: ' + xhr.responseText);
        }
      });
    };

    ItemView.prototype.toggle = function() {
      return this.model.toggle().save();
    };

    ItemView.prototype.onEditClick = function() {
      this.$el.addClass("editing");
      return this.ui.edit.focus();
    };

    ItemView.prototype.updateTodo = function() {
      var todoText;
      todoText = this.ui.edit.val();
      if (todoText === "") {
        return this.destroy();
      }
      this.setTodoText(todoText);
      return this.completeEdit();
    };

    ItemView.prototype.onEditBlur = function(e) {
      return this.updateTodo();
    };

    ItemView.prototype.onEditKeypress = function(e) {
      var ENTER_KEY;
      ENTER_KEY = 13;
      if (e.which === ENTER_KEY) {
        return this.updateTodo();
      }
    };

    ItemView.prototype.setTodoText = function(todoText) {
      if (todoText.trim() === "") {
        return;
      }
      return this.model.set("title", todoText).save();
    };

    ItemView.prototype.completeEdit = function() {
      return this.$el.removeClass("editing");
    };

    return ItemView;

  })(Marionette.ItemView);

  window.ListView = (function(_super) {
    __extends(ListView, _super);

    function ListView() {
      _ref3 = ListView.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    ListView.prototype.template = "#template-todoListCompositeView";

    ListView.prototype.itemView = window.ItemView;

    ListView.prototype.itemViewContainer = "#todo-list";

    ListView.prototype.ui = {
      toggle: "#toggle-all"
    };

    ListView.prototype.events = {
      "click #toggle-all": "onToggleAllClick"
    };

    ListView.prototype.initialize = function() {
      return this.listenTo(this.collection, "all", this.update);
    };

    ListView.prototype.onRender = function() {
      return this.update();
    };

    ListView.prototype.update = function() {
      var allCompleted, reduceCompleted;
      reduceCompleted = function(left, right) {
        return left && right.get("completed");
      };
      allCompleted = this.collection.reduce(reduceCompleted, true);
      this.ui.toggle.prop("checked", allCompleted);
      return this.$el.parent().toggle(!!this.collection.length);
    };

    ListView.prototype.onToggleAllClick = function(e) {
      var isChecked;
      isChecked = e.currentTarget.checked;
      return this.collection.each(function(todo) {
        return todo.save({
          completed: isChecked
        });
      });
    };

    return ListView;

  })(Backbone.Marionette.CompositeView);

  window.ListHeader = (function(_super) {
    __extends(ListHeader, _super);

    function ListHeader() {
      _ref4 = ListHeader.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    ListHeader.prototype.template = "#template-header";

    ListHeader.prototype.ui = {
      input: "#new-todo"
    };

    ListHeader.prototype.events = {
      "keypress #new-todo": "onInputKeypress",
      "blur #new-todo": "onTodoBlur"
    };

    ListHeader.prototype.onTodoBlur = function() {
      var todoText;
      todoText = this.ui.input.val().trim();
      return this.createTodo(todoText);
    };

    ListHeader.prototype.onInputKeypress = function(e) {
      var ENTER_KEY, todoText;
      ENTER_KEY = 13;
      todoText = this.ui.input.val().trim();
      if (e.which === ENTER_KEY && todoText) {
        return this.createTodo(todoText);
      }
    };

    ListHeader.prototype.completeAdd = function() {
      return this.ui.input.val("");
    };

    ListHeader.prototype.createTodo = function(todoText) {
      if (todoText.trim() === "") {
        return;
      }
      this.collection.create({
        title: todoText
      });
      return this.completeAdd();
    };

    return ListHeader;

  })(Backbone.Marionette.ItemView);

  window.ListFilters = (function(_super) {
    __extends(ListFilters, _super);

    function ListFilters() {
      this.searchArchivedByDate = __bind(this.searchArchivedByDate, this);
      this.onRender = __bind(this.onRender, this);
      _ref5 = ListFilters.__super__.constructor.apply(this, arguments);
      return _ref5;
    }

    ListFilters.prototype.template = "#template-todoListFilters";

    ListFilters.prototype.events = {
      'click #btnGo': 'searchArchivedByDate'
    };

    ListFilters.prototype.ui = {
      dateFrom: ".txtDateFrom",
      dateTo: ".txtDateTo",
      btnGo: "#btnGo"
    };

    ListFilters.prototype.onRender = function() {
      this.ui.dateFrom.datepicker();
      return this.ui.dateTo.datepicker();
    };

    ListFilters.prototype.searchArchivedByDate = function() {
      var dateFrom, dateTo;
      dateFrom = Date.parse(this.ui.dateFrom.val());
      dateTo = Date.parse(this.ui.dateTo.val());
      return Todo.find({
        archived: true,
        created: {
          $gte: dateFrom.valueOf(),
          $lt: dateTo.valueOf()
        }
      }, function(err, todos) {
        if (err) {
          console.log(err);
        }
        return app.collections.tds.reset(todos || []);
      });
    };

    return ListFilters;

  })(Backbone.Marionette.ItemView);

  window.TodoMVC = new Backbone.Marionette.Application();

  window.app = {};

  window.app.collections = {};

  TodoMVC.addRegions({
    header: '#header',
    main: '#main',
    footer: '#footer',
    filters: '#filters'
  });

  TodoMVC.addInitializer(function(options) {
    var hv, lf, lv;
    app.collections.tds = new TodoList();
    lv = new ListView({
      collection: app.collections.tds
    });
    hv = new ListHeader({
      collection: app.collections.tds
    });
    lf = new ListFilters();
    TodoMVC.header.show(hv);
    TodoMVC.main.show(lv);
    return TodoMVC.filters.show(lf);
  });

  TodoMVC.on('initialize:after', function() {
    Backbone.history.start();
    return Todo.find({
      archived: false
    }, function(err, todos) {
      if (err) {
        console.log(err);
      }
      return app.collections.tds.add(todos || []);
    });
  });

  $(document).ready(function() {
    return TodoMVC.start();
  });

}).call(this);
